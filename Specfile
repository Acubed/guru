# This is, of course, a comment

# A Specfile allows us to make declaratons about what our files _are_
# Guru takes these declarations and can run actions on them
# These actions can be defined by anyone, including in this Specfile

# Some sample actions might be:
# Run `mocha` across all files marked as a MochaTest
# Install files to the system, to /usr/bin, /usr/lib, or other directories depending on how they're marked
# Build an RPM, npm, deb, or ebuild package for package managers
# Compile a NodejsCoffeescriptModule file to a NodejsJavascriptModule (*.coffee -> *.js)
# and more...

# The `guru` command builds or runs actions against a file or classes of files.

# Some things you should be able to do:
# $ guru test # build all testing-related targets
# $ guru npm # build an npm package
# $ guru xp # pre-build all cross-platform components e.g. minification, testing, preprocessing
# $ guru rpm rpm-flavor=centos # pre-build all cross-platform components e.g. minification, testing, preprocessing


# The simplest thing that Guru can do is perform actions against files that you have annotated

<http://example.com/project.doap>
	# Declare what classes the resource is an instance of
	# you can also use the "a" keyword as in Turtle
	type NodejsPackage ;
	# Metadata for various package management tools
	npmname "jsonschema" ;
	rpmname "nodejs-jsonschema" ;
	debname "nodejs-jsonschema" ;
	ebuildname "dev-libs/nodejs-jsonschema" ;
	# The package version is automatically detected from a VERSION file or by asking Git, or some other file
	.


`lib/**.js`
	a NodejsModule, CheckCoverage, LintTest ; .


`lib/**.coffee`
	a CoffeeScriptFile, CoffeeScriptFileNodejs ; .
